[{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"deeppatientlevelprediction","dir":"Articles","previous_headings":"Introduction","what":"DeepPatientLevelPrediction","title":"Building Deep Learning Models","text":"Patient level prediction aims use historic data learn function input (patient’s features age/gender/comorbidities index) output (whether patient experienced outcome time--risk). Deep learning example current state---art classifiers can implemented learn function inputs outputs. Deep Learning models widely used automatically learn high-level feature representations data, achieved remarkable results image processing, speech recognition computational biology. Recently, interesting results shown using large observational healthcare data (e.g., electronic healthcare data claims data), extensive research needed assess power Deep Learning domain. vignette describes can use Observational Health Data Sciences Informatics (OHDSI) PatientLevelPrediction package DeepPatientLevelPrediction package build Deep Learning models. vignette assumes read comfortable building patient level prediction models described BuildingPredictiveModels vignette. Furthermore, vignette assumes familiar Deep Learning methods.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"background","dir":"Articles","previous_headings":"Introduction","what":"Background","title":"Building Deep Learning Models","text":"Deep Learning models build stacking often large number neural network layers perform feature engineering steps, e.g embedding, collapsed final linear layer (equivalent logistic regression). algorithms need lot data converge good representation, currently sizes large observational healthcare databases growing fast make Deep Learning interesting approach test within OHDSI’s Patient-Level Prediction Framework. current implementation allows us perform research scale value limitations Deep Learning using observational healthcare data. package use pytorch reticulate package. Many network architectures recently proposed implemented number , however, list grow near future. important understand architectures require 2D data matrix, .e. |patient|x|feature|, others use 3D data matrix |patient|x|feature|x|time|. FeatureExtraction Package extended enable extraction data formats described examples . Note training Deep Learning models computationally intensive, implementation therefore supports GPU CPU. GPU highly recommended neccesary models Deep Learning!","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"requirements","dir":"Articles","previous_headings":"Introduction","what":"Requirements","title":"Building Deep Learning Models","text":"Full details package requirements instructions installing package can found .","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"integration-with-patientlevelprediction","dir":"Articles","previous_headings":"Introduction","what":"Integration with PatientLevelPrediction","title":"Building Deep Learning Models","text":"DeepPatientLevelPrediction package provides additional model settings can used within PatientLevelPrediction package runPlp() runMultiplePlp() functions. use packages first need pick deep learning architecture wish fit (see ) specify modelSettings inside runPlp().","code":"# load the data plpData <- PatientLevelPrediction::loadPlpData('locationOfData')  # pick the set<Model> from  DeepPatientLevelPrediction deepLearningModel <- DeepPatientLevelPrediction::setDefaultResNet()  # use PatientLevelPrediction to fit model deepLearningResult <- PatientLevelPrediction::runPlp(     plpData = plpData,      outcomeId = 1230,      modelSettings = deepLearningModel,     analysisId = 'resNetTorch',      ...   )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"non-temporal-architectures","dir":"Articles","previous_headings":"","what":"Non-Temporal Architectures","title":"Building Deep Learning Models","text":"implemented following non-temporal (2D data matrix) architectures:","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"overall-concept","dir":"Articles","previous_headings":"Non-Temporal Architectures > Simple MultiLayerPerceptron","what":"Overall concept","title":"Building Deep Learning Models","text":"multilayer perceptron (MLP) model directed graph consisting input layer, one hidden layers output layer. model takes input feature values feeds forward graph determine output class. process known ‘backpropagation’ used train model. Backpropagation requires ground truth involves automatically calculating derivative model parameters respect error model’s predictions ground truth. model learns adjust model’s parameters reduce error.","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"set-function","dir":"Articles","previous_headings":"Non-Temporal Architectures > Simple MultiLayerPerceptron > Example","what":"Set Function","title":"Building Deep Learning Models","text":"use package fit MLP model can use setMultiLayerPerceptron() function specify hyper-parameter settings MLP.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"inputs","dir":"Articles","previous_headings":"Non-Temporal Architectures > Simple MultiLayerPerceptron > Example","what":"Inputs","title":"Building Deep Learning Models","text":"numLayers sizeHidden inputs define network topology via number layers neurons network’s hidden layers. dropout input specifies probability layer randomly sets inputs 0 step training time. value 0.2 means 20% layers inputs set 0. used reduce overfitting. sizeEmbedding input specifies size embedding used. first layer embedding layer converts sparse feature dense learned vector. embedding lower dimensional projection features distance points measure similarity. weightDecay input corresponds weight decay objective function. model fitting aim minimize objective function. objective function made prediction error (difference prediction vs truth) plus square weights multiplied weight decay. larger weight decay, penalize large weights. set weight decay large, model never fit well enough, set low, need careful overfitting (try stop model fitting earlier). learningRate input learning rate hyperparameter controls much change model response estimated error time model weights updated. smaller learningRate longer take fit model model weights may get stuck, learningRate large, weights may sub-optimally converge fast. seed lets user use random initialization network’s weights previous run. hyperParamSearch chooses strategy find best hyperparameters. Currently random search grid search supported. Grid search searches every possible combination hyperparameters random search samples randomly combinations. Since neural networks can flexible many hyperparameter combinations ’s almost never feasible full grid search unless network really small. randomSample chooses many random samples use. device specifies device use. Either cpu cuda. many GPU’s cuda:x x gpu number seen nvidia-smi. batchSize corresponds number data points (patients) used per iteration estimate network error model fitting. epochs corresponds many time run entire training data fitting model.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"example-code","dir":"Articles","previous_headings":"Non-Temporal Architectures > Simple MultiLayerPerceptron > Example","what":"Example Code","title":"Building Deep Learning Models","text":"example, following code try 10 different network configurations sampled possible combinations given pick one obtains greatest AUROC via cross validation training data fit model configuration using training data. standard output runPlp() returned - contains MLP model along performance details settings. Note possible combinations 222*2 16 specify randomSample=10 try 10 .","code":"modelSettings <- setMultiLayerPerceptron(   numLayers = c(3L, 5L),   sizeHidden = c(64L, 128L),    dropout = c(0.2),   sizeEmbedding = c(32L, 64L),   estimatorSettings = setEstimator(     learningRate = c(1e-3, 1e-4),     weightDecay = c(1e-5),     batchSize = c(128L),     epochs=c(5L),     seed=12L   ),   randomSample=10L )  mlpResult <- PatientLevelPrediction::runPlp(     plpData = plpData,      outcomeId = 3,      modelSettings = modelSettings,     analysisId = 'MLP',      analysisName = 'Testing Deep Learning',      populationSettings = populationSet,      splitSettings = PatientLevelPrediction::createDefaultSplitSetting(),      preprocessSettings = PatientLevelPrediction::createPreprocessSettings(),      executeSettings = PatientLevelPrediction::createExecuteSettings(       runSplitData = TRUE,        runSampleData = FALSE,        runFeatureEngineering = FALSE,        runPreprocessData = TRUE,        runModelDevelopment = TRUE,        runCovariateSummary = FALSE     ),      saveDirectory = file.path(testLoc, 'DeepNNTorch')   )"},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"overall-concept-1","dir":"Articles","previous_headings":"Non-Temporal Architectures > ResNet","what":"Overall concept","title":"Building Deep Learning Models","text":"Deep learning models often trained via process known gradient descent. process network weights updated based gradient error function current weights. However, number layers network increase, greater chance experiencing issue known vanishing exploding gradients. vanishing exploding gradient gradient goes 0 infinity, negatively impacts model fitting. residual network (ResNet) introduced address vanishing exploding gradient issue. works adding connections non-adjacent layers, termed ‘skip connection’. ResNet calculates embeddings every feature averages compute embedding per patient. implementation ResNet tabular data based paper.","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"set-function-1","dir":"Articles","previous_headings":"Non-Temporal Architectures > ResNet > Example","what":"Set Function","title":"Building Deep Learning Models","text":"use package fit ResNet model can use setResNet() function specify hyperparameter settings network.","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"model-inputs","dir":"Articles","previous_headings":"","what":"Building Deep Learning Models","title":"Building Deep Learning Models","text":"numLayers: many layers use model. sizeHidden: many neurons hidden layer hiddenFactor: much increase number neurons layer (see paper) residualDropout andhiddenDropout : much dropout apply hidden layer residual connection sizeEmbedding : size initial embedding layer","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"estimator-inputs","dir":"Articles","previous_headings":"","what":"Building Deep Learning Models","title":"Building Deep Learning Models","text":"weightDecay : much weight decay apply, penalizes bigger weights learningRate : learning rate use seed : seed weight initialization device : device use, cpu gpu batchSize : Size batch data used per iteration training epochs : many runs data","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"hyperparameter-tuning-inputs","dir":"Articles","previous_headings":"","what":"Building Deep Learning Models","title":"Building Deep Learning Models","text":"hyperParamSearch : type hyperparameter search use, either random sampling exhaustive (grid) search randomSample: random search hyperparameters, many random samples use randomSampleSeed: Seed make hyperparameter search reproducible","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"example-code-1","dir":"Articles","previous_headings":"Non-Temporal Architectures > ResNet > Example","what":"Example Code","title":"Building Deep Learning Models","text":"example, following code fit two layer ResNet layer 32 neurons increases factor two decreasing (hiddenFactor). 10% inputs layer residual connection within layer randomly zeroed training testing.embedding layer 32 neurons. Learning rate 3e-4 weight decay 1e-6 used optimizer. hyperparameter search done since input includes one option.","code":"resset <- setResNet(   numLayers = c(2L),    sizeHidden = c(32L),   hiddenFactor = c(2L),   residualDropout = c(0.1),    hiddenDropout = c(0.1),   sizeEmbedding = c(32L),   estimatorSettings = setEstimator(learningRate = c(3e-4),                                    weightDecay = c(1e-6),                                    #device='cuda:0', # uncomment to use GPU                                    batchSize = 128L,                                     epochs = 3L,                                    seed = 42L),   hyperParamSearch = 'random',   randomSample = 1 )  resResult <- PatientLevelPrediction::runPlp(     plpData = plpData,      outcomeId = 3,      modelSettings = resset,     analysisId = 'ResNet',      analysisName = 'Testing ResNet',      populationSettings = populationSet,      splitSettings = PatientLevelPrediction::createDefaultSplitSetting(),      preprocessSettings = PatientLevelPrediction::createPreprocessSettings(),      executeSettings = PatientLevelPrediction::createExecuteSettings(       runSplitData = TRUE,        runSampleData = FALSE,        runFeatureEngineering = FALSE,        runPreprocessData = TRUE,        runModelDevelopment = TRUE,        runCovariateSummary = FALSE     ),      saveDirectory = file.path(getwd(), 'ResNet') # change to save elsewhere   )"},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"overall-concept-2","dir":"Articles","previous_headings":"Non-Temporal Architectures > Transformer","what":"Overall concept","title":"Building Deep Learning Models","text":"Recently surge models natural language processing computer vision utilize attention. technique model learns look focus input data. first described attention need paper. used implementation shown good performance non-temporal tabular data paper. architecture computationally expensive scales badly longer sequence length. case sequence amount features patient . Users need aware many features feeding model since effect computation time heavily. something control FeatureExtraction create covariateSettings.","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"set-function-2","dir":"Articles","previous_headings":"Non-Temporal Architectures > Transformer > Examples","what":"Set Function","title":"Building Deep Learning Models","text":"use package fit Transformer model can use setTransformer() function specify hyperparameter settings network.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"inputs-2","dir":"Articles","previous_headings":"Non-Temporal Architectures > Transformer > Examples","what":"Inputs","title":"Building Deep Learning Models","text":"training hyperparameter tuning inputs ResNet.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"model-inputs-1","dir":"Articles","previous_headings":"","what":"Building Deep Learning Models","title":"Building Deep Learning Models","text":"numBlocks : many Transformer blocks use, block includes self-attention layer feedforward block two linear layers. dimToken : Dimension embedding feature. dimOut : Dimension output, binary problems 1. numHeads : Number attention heads self-attention, dimToken needs divisible numHeads. attDropout, ffnDropout : much dropout apply attentions feedforward block dimHidden : many neurons linear layers inside feedforward block","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"example-code-2","dir":"Articles","previous_headings":"Non-Temporal Architectures > Transformer > Examples","what":"Example Code","title":"Building Deep Learning Models","text":"","code":"modelSettings <- setTransformer(numBlocks = 3L,                                 dimToken = 32L,                                 dimOut = 1,                                  numHeads = 4L,                                 attDropout = 0.25,                                 ffnDropout = 0.25,                                 dimHidden = 128L,                                 estimatorSettings = setEstimator(                                   learningRate = 3e-4,                                   weightDecay = 1e-6,                                   batchSize = 128L,                                   epochs = 10L,                                   device = 'cpu'                                 ),                                 randomSample=1L)                                  TransformerResult <- PatientLevelPrediction::runPlp(     plpData = plpData,      outcomeId = 3,      modelSettings = modelSettings,     analysisId = 'Transformer',      analysisName = 'Testing transformer',      populationSettings = populationSet,      splitSettings = PatientLevelPrediction::createDefaultSplitSetting(),      preprocessSettings = PatientLevelPrediction::createPreprocessSettings(),      executeSettings = PatientLevelPrediction::createExecuteSettings(       runSplitData = TRUE,        runSampleData = FALSE,        runFeatureEngineering = FALSE,        runPreprocessData = TRUE,        runModelDevelopment = TRUE,        runCovariateSummary = FALSE     ),      saveDirectory = file.path(getwd(), 'Transformer') # change to save elsewhere   )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/BuildingDeepModels.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Building Deep Learning Models","text":"Considerable work dedicated provide DeepPatientLevelPrediction package. Please reference paper use PLP Package work: Reps JM, Schuemie MJ, Suchard MA, Ryan PB, Rijnbeek PR. Design implementation standardized framework generate evaluate patient-level prediction models using observational healthcare data. J Med Inform Assoc. 2018;25(8):969-975.","code":"citation(\"DeepPatientLevelPrediction\") ## To cite package 'DeepPatientLevelPrediction' in publications use: ##  ##   Fridgeirsson E, Reps J, Chan You S, Kim C, John H (2025). ##   _DeepPatientLevelPrediction: Deep Learning for Patient Level ##   Prediction Using Data in the OMOP Common Data Model_. R package ##   version 2.2.0.9999, ##   <https://github.com/OHDSI/DeepPatientLevelPrediction>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {DeepPatientLevelPrediction: Deep Learning for Patient Level Prediction Using Data in the ## OMOP Common Data Model}, ##     author = {Egill Fridgeirsson and Jenna Reps and Seng {Chan You} and Chungsoo Kim and Henrik John}, ##     year = {2025}, ##     note = {R package version 2.2.0.9999}, ##     url = {https://github.com/OHDSI/DeepPatientLevelPrediction}, ##   }"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/FirstModel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Developing your first DeepPLP model","text":"vignette describes can develop first deep learning model using deepPLP package OMOP-CDM data. First make sure everything installed correctly following installation guide","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/FirstModel.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Developing your first DeepPLP model","text":"Since publicly available data use nifty little package called Eunomia provides us synthetic data OMOP-CDM. can installed : start define cohorts interest extract called plpData object features want use. Eunomia cohorts already defined need create . can running: first line gets Eunomia connection details. Eunomia data stored sqlite database. second line creates cohorts. see output confirming three target cohorts created, consisting users certain medications one outcome cohort gastrointestinal bleeding.","code":"install.packages('Eunomia') connectionDetails <- Eunomia::getEunomiaConnectionDetails() Eunomia::createCohorts(connectionDetails)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/FirstModel.html","id":"our-settings","dir":"Articles","previous_headings":"","what":"Our settings","title":"Developing your first DeepPLP model","text":"define covariate settings using FeatureExtraction means extracting gender binary variable, age continuous variable conditions occurring long term window, default 365 days prior index. want know terms recommend checking book OHDSI. Next need define database details, defines database getting cohorts. Since don’t database using Eunomia. means using cohort 4 target cohort, population risk, 3 outcome cohort, experience outcome. According previous Eunomia output predicting gastrointestinal bleeding users NSAIDs. Now define study population get plpData object database. defining study population define time--risk. predicing certain patient gets outcome . predict outcome day patient starts using NSAIDs one year later.","code":"covariateSettings <- FeatureExtraction::createCovariateSettings(   useDemographicsGender = TRUE,   useDemographicsAge = TRUE,   useConditionOccurrenceLongTerm = TRUE ) databaseDetails <- PatientLevelPrediction::createDatabaseDetails(   connectionDetails = connectionDetails,    cdmDatabaseSchema = \"main\",   cdmDatabaseId = \"1\",   cohortDatabaseSchema = \"main\",    cohortTable = \"cohort\",    targetId= 4,    outcomeIds = 3,   outcomeDatabaseSchema = \"main\",    outcomeTable =  \"cohort\",    cdmDatabaseName = 'eunomia' ) populationSettings <- PatientLevelPrediction::createStudyPopulationSettings(                                                           requireTimeAtRisk = F,                                                            riskWindowStart = 1,                                                            riskWindowEnd = 365) plpData <- PatientLevelPrediction::getPlpData(   databaseDetails = databaseDetails,   covariateSettings = covariateSettings,   restrictPlpDataSettings = PatientLevelPrediction::createRestrictPlpDataSettings())"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/FirstModel.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The model","title":"Developing your first DeepPLP model","text":"Now ’s time define deep learning model. can daunting familiar deep learning define first model since models flexible many hyperparameters define model architecture. help deepPLP helper functions sensible set hyperparameters testing. Best practice though extensive hyperparameter tuning step using cross validation. use simple ResNet example. ResNet simple models skip connections layers allow deeper models without overfitting. default ResNet 6 layer model 512 neurons per layer. still need define parameters. Device defines device train model. Usually deep learning models slow train need GPU. However example small enough can use CPU. access GPU can try changing device 'cuda' see much faster goes. also need define batch size. Usually deep learning model sees small chunk data time, case 256 patients. model updated seeing next batch. batch order random. called stochastic gradient descent. Finally define epochs. long train model. One epoch means model seen data . case train model 3 epochs. Now left using PLP train first deep learning model. used PLP look familiar . computer takes 20 seconds per epoch. probably won’t see kind good performance using model data, least training loss decreasing printed output. Congratulations just developed first deep learning model!","code":"library(DeepPatientLevelPrediction) modelSettings <- setDefaultResNet(   estimatorSettings = setEstimator(learningRate=3e-4,                                    device=\"cpu\",                                    batchSize=256L,                                    epochs=3L) ) plpResults <- PatientLevelPrediction::runPlp(plpData = plpData,                outcomeId = 3,                modelSettings = modelSettings,                analysisId = 'ResNet',                analysisName = 'Testing DeepPlp',                populationSettings = populationSettings                                                       )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/FirstModel.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Developing your first DeepPLP model","text":"Considerable work dedicated provide DeepPatientLevelPrediction package. Please reference paper use PLP Package work: Reps JM, Schuemie MJ, Suchard MA, Ryan PB, Rijnbeek PR. Design implementation standardized framework generate evaluate patient-level prediction models using observational healthcare data. J Med Inform Assoc. 2018;25(8):969-975.","code":"citation(\"DeepPatientLevelPrediction\") ## To cite package 'DeepPatientLevelPrediction' in publications use: ##  ##   Fridgeirsson E, Reps J, Chan You S, Kim C, John H (2025). ##   _DeepPatientLevelPrediction: Deep Learning for Patient Level ##   Prediction Using Data in the OMOP Common Data Model_. R package ##   version 2.2.0.9999, ##   <https://github.com/OHDSI/DeepPatientLevelPrediction>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {DeepPatientLevelPrediction: Deep Learning for Patient Level Prediction Using Data in the ## OMOP Common Data Model}, ##     author = {Egill Fridgeirsson and Jenna Reps and Seng {Chan You} and Chungsoo Kim and Henrik John}, ##     year = {2025}, ##     note = {R package version 2.2.0.9999}, ##     url = {https://github.com/OHDSI/DeepPatientLevelPrediction}, ##   }"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DeepPatientLevelPrediction Installation Guide","text":"vignette describes need install Observational Health Data Science Informatics (OHDSI) DeepPatientLevelPrediction Windows, Mac Linux.","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"windows-users","dir":"Articles","previous_headings":"Software Prerequisites","what":"Windows Users","title":"DeepPatientLevelPrediction Installation Guide","text":"Windows OHDSI Deep Patient Level Prediction (DeepPLP) package requires installing: R (https://cran.r-project.org/ ) - (R >= 4.0.0, latest recommended) Python - package tested python 3.10, >= 3.8 work Rstudio (https://www.rstudio.com/ ) Java (http://www.java.com ) RTools (https://cran.r-project.org/bin/windows/Rtools/)","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"maclinux-users","dir":"Articles","previous_headings":"Software Prerequisites","what":"Mac/Linux Users","title":"DeepPatientLevelPrediction Installation Guide","text":"Mac Linux OHDSI DeepPLP package requires installing: R (https://cran.r-project.org/ ) - (R >= 4.0.0, latest recommended) Python - package tested python 3.10, >= 3.8 work Rstudio (https://www.rstudio.com/ ) Java (http://www.java.com ) Xcode command line tools(run terminal: xcode-select –install) [MAC USERS ]","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"installing-the-package","dir":"Articles","previous_headings":"","what":"Installing the Package","title":"DeepPatientLevelPrediction Installation Guide","text":"preferred way install package using remotes, automatically install latest release latest dependencies. want official release install bleeding edge version package (latest develop branch). Note latest develop branch contain bugs, please report us experience problems.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"installing-python-environment","dir":"Articles","previous_headings":"Installing the Package","what":"Installing Python environment","title":"DeepPatientLevelPrediction Installation Guide","text":"Since package uses pytorch reticulate working python installation required. package tested python 3.10. install python easy way use miniconda reticulate: default install_minconda() creates environment r-reticulate python 3.9. use instead python 3.10 can : reticulate issues finding conda installation can use function reticulate::miniconda_path() find default installation location miniconda installation. can force reticulate use newly generated environment setting environment variable RETICULATE_PYTHON point python binary environment. example adding following .Renviron file: need restart R session. verify reticulate finds correct version. can call reticulate::py_config(). working python environment reticulate can locate can install DeepPatientLevelPrediction. want use specific python environment can set environment variable RETICULATE_PYTHON point python executable environment .Renviron file. need installing DeepPatientLevelPrediction.","code":"install.packages('reticulate') reticulate::install_miniconda() reticulate::conda_install(envname = 'r-reticulate', packages=c('python=3.10')) RETICULATE_PYTHON=\"/path/to/miniconda/envs/r-reticulate/python/bin\""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"installing-deeppatientlevelprediction-using-remotes","dir":"Articles","previous_headings":"Installing the Package","what":"Installing DeepPatientLevelPrediction using remotes","title":"DeepPatientLevelPrediction Installation Guide","text":"install using remotes run: install required python packages. doesn’t happen can triggered calling: print tensor ten different values. installing make sure close Rstudio sessions using DeepPatientLevelPrediction dependency. Keeping Rstudio sessions open can cause locks windows prevent package installing.","code":"install.packages(\"remotes\") remotes::install_github(\"OHDSI/DeepPatientLevelPrediction\") library(DeepPatientLevelPrediction) torch$randn(10L)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"testing-installation","dir":"Articles","previous_headings":"","what":"Testing Installation","title":"DeepPatientLevelPrediction Installation Guide","text":"","code":"library(PatientLevelPrediction) library(DeepPatientLevelPrediction)  data(plpDataSimulationProfile) sampleSize <- 1e3 plpData <- simulatePlpData(   plpDataSimulationProfile,   n = sampleSize  )  populationSettings <- PatientLevelPrediction::createStudyPopulationSettings(                                                           requireTimeAtRisk = F,                                                            riskWindowStart = 1,                                                            riskWindowEnd = 365) # a very simple resnet modelSettings <- setResNet(numLayers = 2L,                             sizeHidden = 64L,                             hiddenFactor = 1L,                            residualDropout = 0,                             hiddenDropout = 0.2,                             sizeEmbedding = 64L,                             estimatorSettings = setEstimator(learningRate = 3e-4,                                                             weightDecay = 1e-6,                                                             device='cpu',                                                             batchSize=128L,                                                             epochs=3L,                                                             seed = 42),                            hyperParamSearch = 'random',                            randomSample = 1L)  plpResults <- PatientLevelPrediction::runPlp(plpData = plpData,                outcomeId = 3,                modelSettings = modelSettings,                analysisId = 'Test',                analysisName = 'Testing DeepPlp',                populationSettings = populationSettings,                splitSettings = createDefaultSplitSetting(),                sampleSettings = createSampleSettings(),                 featureEngineeringSettings = createFeatureEngineeringSettings(),                 preprocessSettings = createPreprocessSettings(),                logSettings = createLogSettings(),                executeSettings = createExecuteSettings(runSplitData = TRUE,                                                       runSampleData = FALSE,                                                       runFeatureEngineering = FALSE,                                                       runPreprocessData = TRUE,                                                       runModelDevelopment = TRUE,                                                       runCovariateSummary = TRUE                                                       ))"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/Installing.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"DeepPatientLevelPrediction Installation Guide","text":"Considerable work dedicated provide DeepPatientLevelPrediction package. Please reference paper use PLP Package work: Reps JM, Schuemie MJ, Suchard MA, Ryan PB, Rijnbeek PR. Design implementation standardized framework generate evaluate patient-level prediction models using observational healthcare data. J Med Inform Assoc. 2018;25(8):969-975.","code":"citation(\"DeepPatientLevelPrediction\") ## To cite package 'DeepPatientLevelPrediction' in publications use: ##  ##   Fridgeirsson E, Reps J, Chan You S, Kim C, John H (2025). ##   _DeepPatientLevelPrediction: Deep Learning for Patient Level ##   Prediction Using Data in the OMOP Common Data Model_. R package ##   version 2.2.0.9999, ##   <https://github.com/OHDSI/DeepPatientLevelPrediction>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {DeepPatientLevelPrediction: Deep Learning for Patient Level Prediction Using Data in the ## OMOP Common Data Model}, ##     author = {Egill Fridgeirsson and Jenna Reps and Seng {Chan You} and Chungsoo Kim and Henrik John}, ##     year = {2025}, ##     note = {R package version 2.2.0.9999}, ##     url = {https://github.com/OHDSI/DeepPatientLevelPrediction}, ##   }"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/TransferLearning.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to use DeepPatientLevelPrediction for Transfer Learning","text":"vignette describes use DeepPatientLevelPrediction package transfer learning. Transfer learning machine learning technique model trained one task used starting point training model different task. can useful small dataset new task, large dataset related task. vignette, show use DeepPatientLevelPrediction package perform transfer learning patient-level prediction task.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/TransferLearning.html","id":"training-initial-model","dir":"Articles","previous_headings":"","what":"Training initial model","title":"How to use DeepPatientLevelPrediction for Transfer Learning","text":"first step transfer learning train initial model. example, train model predict risk patient developing certain condition based electronic health record data. use Eunomia package access dataset train model. following code shows train initial model: default Eunomia package includes four cohorts. Gastrointestinal bleeding (GiBleed) use three different drugs, diclofenac, NSAIDS celecoxib. Usually use one three drug cohorts target cohort predict risk gastrointestinal bleeding. cohort_definition_ids : celecoxib: 1, diclofenac: 2, GiBleed: 3 NSAIDS: 4. creating cohorts can see patients NSAIDS cohort. use cohort target cohort initial model. least patients diclofenac cohort (excluding GiBleed), use cohort target cohort transfer learning model. Now can set initial model development. use simple ResNet. take minutes cpu. Now model developed can finetune diclofenac cohort. First need extract . Now can set transfer learning model development. need use different modelSettings function. setFinetuner. also need know path previously developed model. form outputDir/analysisId/plpResult/model outputDir directory specified develop model analysisId id gave analysis. case 1 path model : ./output/1/plpResult/model. Currently basic transfer learning works loading previously trained model resetting ’s last layer, often called prediction head. train parameters last layer. hope layer’s learned generalizable representations data modifying last layer can mix representations suit new task. much faster since ’s training last layer. Unfortunately results bad. However toy example synthetic toy data process large observational data exactly .","code":"library(DeepPatientLevelPrediction)  # Get connection details for the Eunomia dataset and create the cohorts connectionDetails <- Eunomia::getEunomiaConnectionDetails() Eunomia::createCohorts(connectionDetails) # create some simple covariate settings using Sex, Age and Long-term conditions and drug use in the last year. covariateSettings <- FeatureExtraction::createCovariateSettings(   useDemographicsGender = TRUE,   useDemographicsAge = TRUE,   useConditionOccurrenceLongTerm = TRUE,   useDrugEraLongTerm = TRUE,   endDays = 0 )  # Information about the database. In Eunomia sqlite there is only one schema, main and the cohorts are in a table named `cohort` which is the default.  databaseDetails <- PatientLevelPrediction::createDatabaseDetails(   connectionDetails = connectionDetails,   cdmDatabaseId = \"2\", # Eunomia version used   cdmDatabaseSchema = \"main\",   targetId = 4,   outcomeIds = 3,   cdmDatabaseName = \"eunomia\" )  # Let's now extract the plpData object from the database plpData <- PatientLevelPrediction::getPlpData(   databaseDetails = databaseDetails,   covariateSettings = covariateSettings,   restrictPlpDataSettings = PatientLevelPrediction::createRestrictPlpDataSettings() ) modelSettings <- setResNet(numLayers = c(2),                            sizeHidden = 128,                            hiddenFactor = 1,                            residualDropout = 0.1,                            hiddenDropout = 0.1,                            sizeEmbedding = 128,                            estimatorSettings = setEstimator(                              learningRate = 3e-4,                              weightDecay = 0,                              device = \"cpu\", # use cuda here if you have a gpu                              batchSize = 256,                              epochs = 5,                              seed = 42                            ),                            hyperParamSearch = \"random\",                            randomSample = 1)  plpResults <- PatientLevelPrediction::runPlp(   plpData = plpData,   outcomeId = 3, # 4 is the id of GiBleed   modelSettings = modelSettings,   analysisName = \"Nsaids_GiBleed\",   analysisId = \"1\",   # Let's predict the risk of Gibleed in the year following start of NSAIDs use   populationSettings = PatientLevelPrediction::createStudyPopulationSettings(     requireTimeAtRisk = FALSE,     firstExposureOnly = TRUE,     riskWindowStart = 1,     riskWindowEnd = 365   ),   splitSettings = PatientLevelPrediction::createDefaultSplitSetting(splitSeed = 42),   saveDirectory = \"./output\" # save in a folder in the current directory ) databaseDetails <- PatientLevelPrediction::createDatabaseDetails(   connectionDetails = connectionDetails,   cdmDatabaseId = \"2\", # Eunomia version used   cdmDatabaseSchema = \"main\",   targetId = 2, # diclofenac cohort   outcomeIds = 3,   cdmDatabaseName = \"eunomia\" )  plpDataTransfer <- PatientLevelPrediction::getPlpData(   databaseDetails = databaseDetails,   covariateSettings = covariateSettings, # same as for the developed model   restrictPlpDataSettings = PatientLevelPrediction::createRestrictPlpDataSettings() ) modelSettingsTransfer <- setFinetuner(modelPath = './output/1/plpResult/model',                                       estimatorSettings = setEstimator(                                         learningRate = 3e-4,                                         weightDecay = 0,                                         device = \"cpu\", # use cuda here if you have a gpu                                         batchSize = 256,                                         epochs = 5,                                         seed = 42                                       )) plpResultsTransfer <- PatientLevelPrediction::runPlp(   plpData = plpDataTransfer,   outcomeId = 3,   modelSettings = modelSettingsTransfer,   analysisName = \"Diclofenac_GiBleed\",   analysisId = \"2\",   populationSettings = PatientLevelPrediction::createStudyPopulationSettings(     requireTimeAtRisk = FALSE,     firstExposureOnly = TRUE,     riskWindowStart = 1,     riskWindowEnd = 365   ),   splitSettings = PatientLevelPrediction::createDefaultSplitSetting(splitSeed = 42),   saveDirectory = \"./outputTransfer\" # save in a folder in the current directory )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/TransferLearning.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"How to use DeepPatientLevelPrediction for Transfer Learning","text":"Now finetuned model new cohort using transfer learning. can useful small dataset new task, large dataset related task different database. DeepPatientLevelPrediction package makes easy perform transfer learning patient-level prediction tasks.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/articles/TransferLearning.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"How to use DeepPatientLevelPrediction for Transfer Learning","text":"Considerable work dedicated provide DeepPatientLevelPrediction package. Please reference paper use PLP Package work: Reps JM, Schuemie MJ, Suchard MA, Ryan PB, Rijnbeek PR. Design implementation standardized framework generate evaluate patient-level prediction models using observational healthcare data. J Med Inform Assoc. 2018;25(8):969-975.","code":"citation(\"DeepPatientLevelPrediction\") ## To cite package 'DeepPatientLevelPrediction' in publications use: ##  ##   Fridgeirsson E, Reps J, Chan You S, Kim C, John H (2025). ##   _DeepPatientLevelPrediction: Deep Learning for Patient Level ##   Prediction Using Data in the OMOP Common Data Model_. R package ##   version 2.2.0.9999, ##   <https://github.com/OHDSI/DeepPatientLevelPrediction>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {DeepPatientLevelPrediction: Deep Learning for Patient Level Prediction Using Data in the ## OMOP Common Data Model}, ##     author = {Egill Fridgeirsson and Jenna Reps and Seng {Chan You} and Chungsoo Kim and Henrik John}, ##     year = {2025}, ##     note = {R package version 2.2.0.9999}, ##     url = {https://github.com/OHDSI/DeepPatientLevelPrediction}, ##   }"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Egill Fridgeirsson. Author, maintainer. Jenna Reps. Author. Seng Chan . Author. Chungsoo Kim. Author. Henrik John. Author.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fridgeirsson E, Reps J, Chan S, Kim C, John H (2025). DeepPatientLevelPrediction: Deep Learning Patient Level Prediction Using Data OMOP Common Data Model. R package version 2.2.0.9999, https://github.com/OHDSI/DeepPatientLevelPrediction.","code":"@Manual{,   title = {DeepPatientLevelPrediction: Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model},   author = {Egill Fridgeirsson and Jenna Reps and Seng {Chan You} and Chungsoo Kim and Henrik John},   year = {2025},   note = {R package version 2.2.0.9999},   url = {https://github.com/OHDSI/DeepPatientLevelPrediction}, }"},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"DeepPatientLevelPrediction R package building validating deep learning patient-level predictive models using data OMOP Common Data Model format OHDSI PatientLevelPrediction framework. Reps JM, Schuemie MJ, Suchard MA, Ryan PB, Rijnbeek PR. Design implementation standardized framework generate evaluate patient-level prediction models using observational healthcare data. J Med Inform Assoc. 2018;25(8):969-975.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"Adds deep learning models use OHDSI PatientLevelPrediction framework. Allows add custom deep learning models. Includes MLP, ResNet Transformer Allows use features PatientLevelPrediction validate explore model performance.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"technology","dir":"","previous_headings":"","what":"Technology","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"DeepPatientLevelPrediction R package. uses torch R build deep learning models without using python.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"system-requirements","dir":"","previous_headings":"","what":"System Requirements","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"Requires R (version 4.0.0 higher). Installation Windows requires RTools. training deep learning models cases nvidia GPU required using either Windows Linux.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"install package please read Package installation guide Please read main vignette package: Building Deep Learning Models","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"user-documentation","dir":"","previous_headings":"","what":"User Documentation","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"Documentation can found package website. PDF versions documentation also available, mentioned .","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"Developer questions/comments/feedback: OHDSI Forum use GitHub issue tracker bugs/issues/enhancements","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"Read can contribute package.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"DeepPatientLevelPrediction licensed Apache License 2.0","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Deep Learning for Patient Level Prediction Using Data in the OMOP Common Data Model","text":"DeepPatientLevelPrediction developed R Studio.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/DeepPatientLevelPrediction.html","id":null,"dir":"Reference","previous_headings":"","what":"DeepPatientLevelPrediction — DeepPatientLevelPrediction","title":"DeepPatientLevelPrediction — DeepPatientLevelPrediction","text":"package containing deep learning extensions developing prediction models using data OMOP CDM","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/DeepPatientLevelPrediction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DeepPatientLevelPrediction — DeepPatientLevelPrediction","text":"Maintainer: Egill Fridgeirsson e.fridgeirsson@erasmusmc.nl Authors: Jenna Reps jreps@.jnj.com Seng Chan Chungsoo Kim Henrik John","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a camel case string to snake case — camelCaseToSnakeCase","title":"Convert a camel case string to snake case — camelCaseToSnakeCase","text":"Convert camel case string snake case","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a camel case string to snake case — camelCaseToSnakeCase","text":"","code":"camelCaseToSnakeCase(string)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a camel case string to snake case — camelCaseToSnakeCase","text":"string string converted","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a camel case string to snake case — camelCaseToSnakeCase","text":"string","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCaseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the names of an object from camel case to snake case — camelCaseToSnakeCaseNames","title":"Convert the names of an object from camel case to snake case — camelCaseToSnakeCaseNames","text":"Convert names object camel case snake case","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCaseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the names of an object from camel case to snake case — camelCaseToSnakeCaseNames","text":"","code":"camelCaseToSnakeCaseNames(object)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCaseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the names of an object from camel case to snake case — camelCaseToSnakeCaseNames","text":"object object names converted","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/camelCaseToSnakeCaseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the names of an object from camel case to snake case — camelCaseToSnakeCaseNames","text":"object, converted names.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkFileExists.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to check if a file exists — checkFileExists","title":"helper function to check if a file exists — checkFileExists","text":"helper function check file exists","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkFileExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to check if a file exists — checkFileExists","text":"","code":"checkFileExists(file)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkFileExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to check if a file exists — checkFileExists","text":"file file check","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkHigher.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to check that input is higher than a certain value — checkHigher","title":"helper function to check that input is higher than a certain value — checkHigher","text":"helper function check input higher certain value","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkHigher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to check that input is higher than a certain value — checkHigher","text":"","code":"checkHigher(parameter, value)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkHigher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to check that input is higher than a certain value — checkHigher","text":"parameter input parameter check, can vector value value higher ","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkHigherEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to check that input is higher or equal than a certain value — checkHigherEqual","title":"helper function to check that input is higher or equal than a certain value — checkHigherEqual","text":"helper function check input higher equal certain value","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkHigherEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to check that input is higher or equal than a certain value — checkHigherEqual","text":"","code":"checkHigherEqual(parameter, value)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkHigherEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to check that input is higher or equal than a certain value — checkHigherEqual","text":"parameter input parameter check, can vector value value higher equal ","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkIsClass.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to check class of input — checkIsClass","title":"helper function to check class of input — checkIsClass","text":"helper function check class input","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkIsClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to check class of input — checkIsClass","text":"","code":"checkIsClass(parameter, classes)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/checkIsClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to check class of input — checkIsClass","text":"parameter input parameter check classes classes belong (one )","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/expandComponentGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a Component's Hyperparameter Grid — expandComponentGrid","title":"Expand a Component's Hyperparameter Grid — expandComponentGrid","text":"function takes user-defined setting configurable component (like positional encoding) expands flat list possible configurations. list can used directly within `paramGrid` `PatientLevelPrediction::listCartesian`.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/expandComponentGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a Component's Hyperparameter Grid — expandComponentGrid","text":"","code":"expandComponentGrid(componentSetting)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/expandComponentGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a Component's Hyperparameter Grid — expandComponentGrid","text":"componentSetting user's setting component. can : - single string (e.g., \"AdamW\"). - single named list representing one configuration (e.g., `list(name = \"AdamW\", lr = 0.001)`). - list named lists, list template configurations.   Vectors within templates expanded (e.g., `lr = c(0.001, 0.0001)`).","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/expandComponentGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a Component's Hyperparameter Grid — expandComponentGrid","text":"list element fully-specified, named list one         component configuration.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/fitEstimator.html","id":null,"dir":"Reference","previous_headings":"","what":"fitEstimator — fitEstimator","title":"fitEstimator — fitEstimator","text":"fits deep learning estimator data.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/fitEstimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitEstimator — fitEstimator","text":"","code":"fitEstimator(trainData, modelSettings, analysisId, analysisPath, ...)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/fitEstimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitEstimator — fitEstimator","text":"trainData data use modelSettings modelSettings object analysisId Id analysis analysisPath Path analysis ... Extra inputs","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/gridCvDeep.html","id":null,"dir":"Reference","previous_headings":"","what":"gridCvDeep — gridCvDeep","title":"gridCvDeep — gridCvDeep","text":"Performs grid search deep learning estimator","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/gridCvDeep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gridCvDeep — gridCvDeep","text":"","code":"gridCvDeep(mappedData, labels, modelSettings, modelLocation, analysisPath)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/gridCvDeep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gridCvDeep — gridCvDeep","text":"mappedData Mapped data covariates labels Dataframe outcomes modelSettings Settings model modelLocation save model analysisPath Path analysis","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/predictDeepEstimator.html","id":null,"dir":"Reference","previous_headings":"","what":"predictDeepEstimator — predictDeepEstimator","title":"predictDeepEstimator — predictDeepEstimator","text":"prediction function estimator","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/predictDeepEstimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predictDeepEstimator — predictDeepEstimator","text":"","code":"predictDeepEstimator(plpModel, data, cohort)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/predictDeepEstimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predictDeepEstimator — predictDeepEstimator","text":"plpModel plpModel data plp data object torch dataset cohort data.frame rowIds people","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/py_to_r.polars.dataframe.frame.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Use polars instead of pandas for default conversion from python to R — py_to_r.polars.dataframe.frame.DataFrame","title":"Use polars instead of pandas for default conversion from python to R — py_to_r.polars.dataframe.frame.DataFrame","text":"Use polars instead pandas default conversion python R","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/py_to_r.polars.dataframe.frame.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use polars instead of pandas for default conversion from python to R — py_to_r.polars.dataframe.frame.DataFrame","text":"","code":"# S3 method for class 'polars.dataframe.frame.DataFrame' py_to_r(x)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/py_to_r.polars.dataframe.frame.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use polars instead of pandas for default conversion from python to R — py_to_r.polars.dataframe.frame.DataFrame","text":"x polars DataFrame object","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/py_to_r.polars.dataframe.frame.DataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use polars instead of pandas for default conversion from python to R — py_to_r.polars.dataframe.frame.DataFrame","text":"data.frame R","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/r_to_py.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Use polars instead of pandas for default conversion from R to Python — r_to_py.data.frame","title":"Use polars instead of pandas for default conversion from R to Python — r_to_py.data.frame","text":"Use polars instead pandas default conversion R Python","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/r_to_py.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use polars instead of pandas for default conversion from R to Python — r_to_py.data.frame","text":"","code":"# S3 method for class 'data.frame' r_to_py(x, convert = FALSE)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/r_to_py.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use polars instead of pandas for default conversion from R to Python — r_to_py.data.frame","text":"x data.frame object R convert Logical, whether convert data types Python types","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/r_to_py.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use polars instead of pandas for default conversion from R to Python — r_to_py.data.frame","text":"polars DataFrame object Python","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setCustomEmbeddingModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create default settings a model using custom embeddings — setCustomEmbeddingModel","title":"Create default settings a model using custom embeddings — setCustomEmbeddingModel","text":"model uses custom embeddings Poincare embeddings embeddings form foundation model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setCustomEmbeddingModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create default settings a model using custom embeddings — setCustomEmbeddingModel","text":"","code":"setCustomEmbeddingModel(   embeddingFilePath,   modelSettings = setTransformer(numBlocks = 3, dimToken = 16, dimOut = 1, numHeads = 4,     attDropout = 0.2, ffnDropout = 0.1, dimHidden = 32, estimatorSettings =     setEstimator(learningRate = \"auto\", weightDecay = 1e-04, batchSize = 256, epochs = 2,     seed = NULL, device = \"cpu\"), hyperParamSearch = \"random\", randomSample = 1),   embeddingsClass = \"CustomEmbeddings\" )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setCustomEmbeddingModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create default settings a model using custom embeddings — setCustomEmbeddingModel","text":"embeddingFilePath path saved embeddings. embeddings file pytorch file including dictionary two two fields: `concept_ids`: pytorch long tensor concept ids `embeddings`: pytorch float tensor embeddings modelSettings model use, needs embedding layer name `embedding` replaced custom embeddings embeddingsClass class custom embeddings, e.g. `CustomEmbeddings` `PoincareEmbeddings`","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setCustomEmbeddingModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create default settings a model using custom embeddings — setCustomEmbeddingModel","text":"settings model using custom embeddings","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultResNet.html","id":null,"dir":"Reference","previous_headings":"","what":"setDefaultResNet — setDefaultResNet","title":"setDefaultResNet — setDefaultResNet","text":"Creates settings default ResNet model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultResNet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setDefaultResNet — setDefaultResNet","text":"","code":"setDefaultResNet(   estimatorSettings = setEstimator(learningRate = \"auto\", weightDecay = 1e-06, device =     \"cpu\", batchSize = 1024, epochs = 50, seed = NULL) )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultResNet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setDefaultResNet — setDefaultResNet","text":"estimatorSettings created “`setEstimator“`","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultResNet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"setDefaultResNet — setDefaultResNet","text":"Model architecture https://arxiv.org/abs/2106.11959 . Hyperparameters chosen experience prediction problems.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultTransformer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create default settings for a non-temporal transformer — setDefaultTransformer","title":"Create default settings for a non-temporal transformer — setDefaultTransformer","text":"transformer model default hyperparameters","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultTransformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create default settings for a non-temporal transformer — setDefaultTransformer","text":"","code":"setDefaultTransformer(   estimatorSettings = setEstimator(learningRate = \"auto\", weightDecay = 1e-04, batchSize     = 512, epochs = 10, seed = NULL, device = \"cpu\") )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultTransformer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create default settings for a non-temporal transformer — setDefaultTransformer","text":"estimatorSettings created `setEstimator`","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setDefaultTransformer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create default settings for a non-temporal transformer — setDefaultTransformer","text":"https://arxiv.org/abs/2106.11959 Default hyperparameters paper","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setEstimator.html","id":null,"dir":"Reference","previous_headings":"","what":"setEstimator — setEstimator","title":"setEstimator — setEstimator","text":"creates settings Estimator, takes model trains ","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setEstimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setEstimator — setEstimator","text":"","code":"setEstimator(   learningRate = \"auto\",   weightDecay = 0,   batchSize = 512,   epochs = 30,   device = \"cpu\",   optimizer = torch$optim$AdamW,   scheduler = list(fun = torch$optim$lr_scheduler$ReduceLROnPlateau, params =     list(patience = 1)),   criterion = torch$nn$BCEWithLogitsLoss,   earlyStopping = list(useEarlyStopping = TRUE, params = list(patience = 4)),   compile = FALSE,   metric = \"auc\",   accumulationSteps = NULL,   seed = NULL,   trainValidationSplit = FALSE )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setEstimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setEstimator — setEstimator","text":"learningRate learning rate use weightDecay weight_decay use batchSize batchSize use epochs many epochs train device device train , can string function evaluates device runtime optimizer optimizer use scheduler learning rate scheduler use criterion loss function use earlyStopping earlyStopping used stops training metric improving compile model compiled training, default FALSE metric either `auc` `loss` custom metric use. metric used scheduler earlyStopping. Needs list function `fun`, mode either `min` `max` `name`, `fun` needs function takes prediction labels outputs score. accumulationSteps many steps accumulate gradients updating weights, can also function evaluated runtime seed seed initialize weights model trainValidationSplit TRUE, perform train-validation split model selection instead cross validation","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setFinetuner.html","id":null,"dir":"Reference","previous_headings":"","what":"setFinetuner — setFinetuner","title":"setFinetuner — setFinetuner","text":"creates settings using transfer learning finetune model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setFinetuner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setFinetuner — setFinetuner","text":"","code":"setFinetuner(modelPath, estimatorSettings = setEstimator())"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setFinetuner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setFinetuner — setFinetuner","text":"modelPath path existing plpModel directory estimatorSettings settings created `setEstimator`","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setMultiLayerPerceptron.html","id":null,"dir":"Reference","previous_headings":"","what":"setMultiLayerPerceptron — setMultiLayerPerceptron","title":"setMultiLayerPerceptron — setMultiLayerPerceptron","text":"Creates settings Multilayer perceptron model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setMultiLayerPerceptron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setMultiLayerPerceptron — setMultiLayerPerceptron","text":"","code":"setMultiLayerPerceptron(   numLayers = c(1:8),   sizeHidden = c(2^(6:9)),   dropout = c(seq(0, 0.3, 0.05)),   sizeEmbedding = c(2^(6:9)),   estimatorSettings = setEstimator(learningRate = \"auto\", weightDecay = c(1e-06, 0.001),     batchSize = 1024, epochs = 30, device = \"cpu\"),   hyperParamSearch = \"random\",   randomSample = 100,   randomSampleSeed = NULL )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setMultiLayerPerceptron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setMultiLayerPerceptron — setMultiLayerPerceptron","text":"numLayers Number layers network, default: 1:8 sizeHidden Amount neurons default layer, default: 2^(6:9) (64 512) dropout much dropout apply first linear, default: seq(0, 0.3, 0.05) sizeEmbedding Size embedding default: 2^(6:9) (64 512) estimatorSettings settings Estimator created `setEstimator` hyperParamSearch kind hyperparameter search use random sampling exhaustive grid search. default: 'random' randomSample many random samples hyperparameter space use randomSampleSeed Random seed sample hyperparameter combinations","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setMultiLayerPerceptron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"setMultiLayerPerceptron — setMultiLayerPerceptron","text":"Model architecture","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setResNet.html","id":null,"dir":"Reference","previous_headings":"","what":"setResNet — setResNet","title":"setResNet — setResNet","text":"Creates settings ResNet model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setResNet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setResNet — setResNet","text":"","code":"setResNet(   numLayers = c(1:8),   sizeHidden = c(2^(6:10)),   hiddenFactor = c(1:4),   residualDropout = c(seq(0, 0.5, 0.05)),   hiddenDropout = c(seq(0, 0.5, 0.05)),   sizeEmbedding = c(2^(6:9)),   estimatorSettings = setEstimator(learningRate = \"auto\", weightDecay = c(1e-06, 0.001),     device = \"cpu\", batchSize = 1024, epochs = 30, seed = NULL),   hyperParamSearch = \"random\",   randomSample = 100,   randomSampleSeed = NULL )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setResNet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setResNet — setResNet","text":"numLayers Number layers network, default: 1:16 sizeHidden Amount neurons default layer, default: 2^(6:10) (64 1024) hiddenFactor much grow amount neurons ResLayer, default: 1:4 residualDropout much dropout apply last linear layer ResLayer, default: seq(0, 0.3, 0.05) hiddenDropout much dropout apply first linear layer ResLayer, default: seq(0, 0.3, 0.05) sizeEmbedding Size embedding layer, default: 2^(6:9) '(64 512) estimatorSettings created “`setEstimator“` hyperParamSearch kind hyperparameter search use random sampling exhaustive grid search. default: 'random' randomSample many random samples hyperparameter space use randomSampleSeed Random seed sample hyperparameter combinations","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setResNet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"setResNet — setResNet","text":"Model architecture https://arxiv.org/abs/2106.11959","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setTransformer.html","id":null,"dir":"Reference","previous_headings":"","what":"create settings for training a transformer — setTransformer","title":"create settings for training a transformer — setTransformer","text":"transformer model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setTransformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create settings for training a transformer — setTransformer","text":"","code":"setTransformer(   numBlocks = 3,   dimToken = 192,   dimOut = 1,   numHeads = 8,   attDropout = 0.2,   ffnDropout = 0.1,   dimHidden = 256,   dimHiddenRatio = NULL,   temporal = FALSE,   temporalSettings = list(positionalEncoding = list(name = \"SinusoidalPE\", dropout =     0.1), maxSequenceLength = 256, truncation = \"tail\", timeTokens = TRUE),   estimatorSettings = setEstimator(weightDecay = 1e-06, batchSize = 1024, epochs = 10,     seed = NULL),   hyperParamSearch = \"random\",   randomSample = 1,   randomSampleSeed = NULL )"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setTransformer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create settings for training a transformer — setTransformer","text":"numBlocks number transformer blocks dimToken dimension token (embedding size) dimOut dimension output, usually 1 binary problems numHeads number attention heads attDropout dropout use attentions ffnDropout dropout use feedforward block dimHidden dimension feedworward block dimHiddenRatio dimension feedforward block ratio dimToken (embedding size) temporal Whether use transformer temporal data temporalSettings settings temporal transformer. include - `positionalEncoding`: Positional encoding use, either character   list name settings, default 'SinusoidalPE' dropout 0.1 - `maxSequenceLength`: Maximum sequence length, sequences longer   truncated /padded length either number 'max' Maximum - `truncation`: Truncation method, 'tail' supported - `timeTokens`: Whether use time tokens, default TRUE estimatorSettings created `setEstimator` hyperParamSearch kind hyperparameter search , default 'random' randomSample many samples use hyperparameter search random randomSampleSeed Random seed sample hyperparameter combinations","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setTransformer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create settings for training a transformer — setTransformer","text":"list settings transformer model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/setTransformer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create settings for training a transformer — setTransformer","text":"non-temporal transformer https://arxiv.org/abs/2106.11959","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a camel case string to snake case — snakeCaseToCamelCase","title":"Convert a camel case string to snake case — snakeCaseToCamelCase","text":"Convert camel case string snake case","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a camel case string to snake case — snakeCaseToCamelCase","text":"","code":"snakeCaseToCamelCase(string)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a camel case string to snake case — snakeCaseToCamelCase","text":"string string converted","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a camel case string to snake case — snakeCaseToCamelCase","text":"string","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCaseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the names of an object from snake case to camel case — snakeCaseToCamelCaseNames","title":"Convert the names of an object from snake case to camel case — snakeCaseToCamelCaseNames","text":"Convert names object snake case camel case","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCaseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the names of an object from snake case to camel case — snakeCaseToCamelCaseNames","text":"","code":"snakeCaseToCamelCaseNames(object)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCaseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the names of an object from snake case to camel case — snakeCaseToCamelCaseNames","text":"object object names converted","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/snakeCaseToCamelCaseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the names of an object from snake case to camel case — snakeCaseToCamelCaseNames","text":"object, converted names.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Pytorch module — torch","title":"Pytorch module — torch","text":"`torch` module object equivalent `reticulate::import(\"torch\")` provided mainly convenience.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/torch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pytorch module — torch","text":"object class `python.builtin.module`","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/torch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pytorch module — torch","text":"torch Python module","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":null,"dir":"Reference","previous_headings":"","what":"TrainingCache — trainingCache","title":"TrainingCache — trainingCache","text":"Parameter caching training persistence continuity","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TrainingCache — trainingCache","text":"Whether provided cached parameter grid identical Grid search results training cache Boolen Last grid search index","code":""},{"path":[]},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"TrainingCache — trainingCache","text":"trainingCache$new() trainingCache$isParamGridIdentical() trainingCache$saveGridSearchPredictions() trainingCache$saveModelParams() trainingCache$getGridSearchPredictions() trainingCache$isFull() trainingCache$getLastGridSearchIndex() trainingCache$dropCache() trainingCache$trimPerformance() trainingCache$clone()","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"TrainingCache — trainingCache","text":"Creates new training cache","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$new(inDir)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TrainingCache — trainingCache","text":"inDir Path analysis directory","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-isparamgrididentical-","dir":"Reference","previous_headings":"","what":"Method isParamGridIdentical()","title":"TrainingCache — trainingCache","text":"Checks whether parameter grid model settings identical cached parameters.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$isParamGridIdentical(inModelParams)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"TrainingCache — trainingCache","text":"inModelParams Parameter grid model settings","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-savegridsearchpredictions-","dir":"Reference","previous_headings":"","what":"Method saveGridSearchPredictions()","title":"TrainingCache — trainingCache","text":"Saves grid search results training cache","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$saveGridSearchPredictions(inGridSearchPredictions)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"TrainingCache — trainingCache","text":"inGridSearchPredictions Grid search predictions","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-savemodelparams-","dir":"Reference","previous_headings":"","what":"Method saveModelParams()","title":"TrainingCache — trainingCache","text":"Saves parameter grid training cache","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$saveModelParams(inModelParams)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"TrainingCache — trainingCache","text":"inModelParams Parameter grid model settings","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-getgridsearchpredictions-","dir":"Reference","previous_headings":"","what":"Method getGridSearchPredictions()","title":"TrainingCache — trainingCache","text":"Gets grid search results training cache","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$getGridSearchPredictions()"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-isfull-","dir":"Reference","previous_headings":"","what":"Method isFull()","title":"TrainingCache — trainingCache","text":"Check cache full","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$isFull()"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-getlastgridsearchindex-","dir":"Reference","previous_headings":"","what":"Method getLastGridSearchIndex()","title":"TrainingCache — trainingCache","text":"Gets last index cached grid search","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$getLastGridSearchIndex()"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-dropcache-","dir":"Reference","previous_headings":"","what":"Method dropCache()","title":"TrainingCache — trainingCache","text":"Remove training cache analysis path","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$dropCache()"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-trimperformance-","dir":"Reference","previous_headings":"","what":"Method trimPerformance()","title":"TrainingCache — trainingCache","text":"Trims performance hyperparameter results removing predictions best performing hyperparameter","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$trimPerformance(hyperparameterResults)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"TrainingCache — trainingCache","text":"hyperparameterResults List hyperparameter results","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"TrainingCache — trainingCache","text":"objects class cloneable method.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingCache — trainingCache","text":"","code":"trainingCache$clone(deep = FALSE)"},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/reference/trainingCache.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"TrainingCache — trainingCache","text":"deep Whether make deep clone.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-2209999","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.2.0.9999","title":"DeepPatientLevelPrediction 2.2.0.9999","text":"[Internal] Switch nvidia-ml-py instead pynvml due latter deprecated","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-220","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.2.0","title":"DeepPatientLevelPrediction 2.2.0","text":"SinusoidalPE: Absolute sinusoidal positional embeddings using LearnablePE: Learnable absolute positional embeddings TapePE: Time-absolute Positional Encodings (tAPE) RotaryPE: Rotary position embeddings (RoPE) RelativePE: Relative positional embeddings (RPE) EfficientRPE: Efficient relative positional embeddings (eRPE) TemporalPE: Combines absolute temporal embedding semantic one StochasticConvPE: Relative learnable positional embedding (convSPE) HybridRoPEconvPE: Combines RoPE convSPE TUPE: Transformer learnable positional encoding (TUPE) ALiBiPE: Attention linear biases (ALiBi) [Feature] Use py_require reticulate manage python dependencies update min requirements (PR #150) [Internal] Refactor transformer/dataset/embedding classes use code wether temporal (PR #147) [Feature] Use train/validation split model selection instead cross validation (PR #145) [Feature] Temporal transformer added supports RopE time tokens (PR #147) [Feature] Temporal data processing added (PR #147) [CI] Use uv python github actions (PR #136) [Feature] Add option use torch compile (PR #133) [Feature] efficient conversions polars torch dataset processing (PR #133) [CI] Automatically detect broken links docs using github actions [Feature] Initialize models embeddings, including Poincare (PR #125 PR #130) [Feature] Model initialization made flexible classes (PR #124)","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-210","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.1.0","title":"DeepPatientLevelPrediction 2.1.0","text":"Added basic transfer learning functionality. See vignette(“TransferLearning”) Add gpu memory cleaner clean cached memory memory error python module torch now accessed exported function instead loading module package load Added gradient accumulation. Studies running different sites using different hardware can now use effective batch size accumulating gradients. Refactored cross validation hyperparameter tuning Remove predictions non-optimal hyperparameter combinations save space use html vignettes Rename MLP MultiLayerPerceptron","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-203","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.0.3","title":"DeepPatientLevelPrediction 2.0.3","text":"Hotfix: Fix count polars v0.20.x","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-202","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.0.2","title":"DeepPatientLevelPrediction 2.0.2","text":"Ensure output predict_proba numeric instead 1d array Refactoring: Move cross-validation separate function Refactoring: Move paramsToTune separate function linting: Enforcing HADES style Calculate AUC torch, get rid scikit-learn dependancy added Andromeda dev dependencies","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-201","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.0.1","title":"DeepPatientLevelPrediction 2.0.1","text":"Connection parameter fixed line newest polars Fixed bug LRFinder used hardcoded batch size Seed now used LRFinder ’s reproducible Fixed bug NumericalEmbedding Fixed bug Transformer numerical features Fixed bug resuming full TrainingCache (thanks Zoey Jiang Linying Zhang ) Updated installation documentation feedback HADES hackathon Fixed bug order numeric features wasn’t conserved training test set TrainingCache now saves prediction dataframe best performing model","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-200","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 2.0.0","title":"DeepPatientLevelPrediction 2.0.0","text":"New backend uses pytorch reticulate instead torch R models ported python Dataset class now python Estimator class python Learning rate finder python Added input checks tests wrong inputs Training-cache single hyperparameter combination added Fixed empty test training-cache","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-116","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.1.6","title":"DeepPatientLevelPrediction 1.1.6","text":"Caching resuming hyperparameter iterations","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-115","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.1.5","title":"DeepPatientLevelPrediction 1.1.5","text":"Fix bug device function working LRFinder","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-114","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.1.4","title":"DeepPatientLevelPrediction 1.1.4","text":"Remove torchopt dependancy since adamw now torch Update torch dependency >=0.10.0 Allow device function resolves Estimator initialization","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-113","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.1.3","title":"DeepPatientLevelPrediction 1.1.3","text":"Fix actions torch updated v0.10 (#65)","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-112","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.1.2","title":"DeepPatientLevelPrediction 1.1.2","text":"Fix bug introduced removing modelType attributes (#59)","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-11","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.1","title":"DeepPatientLevelPrediction 1.1","text":"Check number heads compatible embedding dimension fixed (#55) Now transformer width can specified ratio embedding dimensions (dimToken), (#53) custom metric can now defined earlyStopping learning rate schedule (#51) Added setEstimator function configure estimator (#51) Seed added model weight initialization improve reproducibility (#51) Added learning rate finder automatic calculatio learning rate (#51) Add seed sampling hyperparameters (#50) used vectorised torch operations speed data conversion torch dataset","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-102","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.0.2","title":"DeepPatientLevelPrediction 1.0.2","text":"Fix torch binaries issue running tests github actions Fix link website Fix tidyselect silence warnings.","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-101","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.0.1","title":"DeepPatientLevelPrediction 1.0.1","text":"Added changelog website Added first model tutorial Fixed small bug default ResNet Transformer","code":""},{"path":"https://ohdsi.github.com/DeepPatientLevelPrediction/dev/news/index.html","id":"deeppatientlevelprediction-100","dir":"Changelog","previous_headings":"","what":"DeepPatientLevelPrediction 1.0.0","title":"DeepPatientLevelPrediction 1.0.0","text":"created Estimator R6 class handle model fitting Added three non-temporal models. MLP, ResNet Transformer ResNet Transformer default versions hyperparameters Created tests documentation package","code":""}]
