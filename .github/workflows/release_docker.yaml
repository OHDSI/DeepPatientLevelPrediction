# When a new release is published,
# upload image to Dockerhub.
#
# Requires the following repository secrets:
# - DOCKER_IMAGE - Configured as a secret so it can be configured per fork.
# - DOCKER_HUB_USERNAME
# - DOCKER_HUB_ACCESS_TOKEN
# - GITHUBPAT - The github account to use for downloading CRAN dependencies.
#                      Needed to avoid "API rate limit exceeded" from github.
name: release docker

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOCKER_IMAGE: 'ohdsi/deep_plp' 
  
jobs:
  build:
    name: "${{ matrix.config.arch }}"
    runs-on: ${{ matrix.config.runs_on}}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { runs_on: "ubuntu-latest", arch: "amd64"}
          - { runs_on: "ubuntu-latest", arch: "arm64"}
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Prepare
        run: |
          platform=${{ matrix.config.arch }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV     
      
      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}

      # Setup docker build environment
      - name: Set up QEMU
        if: matrix.config.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set build parameters
        id: build_params
        run: |
          echo "SHA8=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha, mode=max
          platforms: "linux/${{ matrix.config.arch }}"
          secrets: |
            build_github_pat=${{ secrets.GH_TOKEN }}
          build-args: |
            GIT_BRANCH=${{ steps.docker_meta.outputs.version }}
            GIT_COMMIT_ID_ABBREV=${{ env.SHA8 }}
            ARCH=${{ matrix.config.arch }}
          # Use runtime labels from docker_meta as well as fixed labels
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=Egill A. Fridgeirsson <e.fridgeirsson@erasmusmc.nl>
            org.opencontainers.image.authors=Egill A. Fridgeirsson <e.fridgeirsson@erasmusmc.nl>, Henrik John <l.john@erasmusmc.nl>
            org.opencontainers.image.vendor=OHDSI
            org.opencontainers.image.licenses=Apache-2.0
          outputs: type=image, name=${{ env.DOCKER_IMAGE}}, push-by-digest=true, name-canonical=true, push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  test:
    name: "test-${{ matrix.config.arch }}-docker"
    runs-on: ${{ matrix.config.runs_on}}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { runs_on: "ubuntu-latest", arch: "amd64"}
          - { runs_on: "ubuntu-latest", arch: "arm64"}
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: "digests-${{ matrix.config.arch }}*"
          merge-multiple: true

      - name: Run R CMD check
        run: |
          digest=$(ls /tmp/digests)

          # Run package checks
          docker run --rm \
          --platform ${{ matrix.config.arch }}
          -e _R_CHECK_FORCE_SUGGESTS_=false \
          -e _R_CHECK_CRAN_INCOMING_=false \
          -v $(pwd):/workspace -w /workspace \
          ${{ env.DOCKER_IMAGE }}@sha256:$digest Rscript -e \
          "install.packages('rcmdcheck');rcmdcheck::rcmdcheck('.', args=c('--no-manual', '--as-cran'), build_args = '--no-manual', error_on = 'warning')"

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}    
